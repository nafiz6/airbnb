//add location attribute

3. DONE

INSERT INTO public."Owner" (name, description, contact,location, username, password) VALUES ($1, $2, $3, $4, $5, $6)

4. DONE

INSERT INTO public."Guests" (name, description, contact,location, username, password) VALUES ($1, $2, $3, $4, $5, $6)

5. DONE
SELECT P.id, P.name, P.no_of_guests, P.no_of_beds, O.id, O.name
	FROM public."Property" AS P 
	INNER JOIN
    public."Owner" as O
	ON P.owner_id = O.id
	WHERE checkAvailibility($3, $2, P.id)
	AND P.location_id in
	(SELECT id FROM public."Location" WHERE country=$1)
	AND P.no_of_guests>=$4;

6.

SELECT P.id, P.name, P.no_of_guests, P.no_of_beds, O.id, O.name
	FROM public."Property" AS P 
	INNER JOIN
    public."Owner" as O
	ON P.owner_id = O.id
	WHERE P.location_id in
	(SELECT id FROM public."Location" WHERE country=$1) LIMIT 10;


7. placeReview(5, 'godplace', 3, 1, 2);

8. (guest books) // verify when booking //trigger to add $$$ to owner

CREATE OR REPLACE FUNCTION bookGuest(cid DATE, cod DATE, pid INT, uname VARCHAR, pwd VARCHAR, packid INT)
RETURNS BOOLEAN
AS $$
 DECLARE
 pp INT;
BEGIN
	IF checkAvailibility(cid, cod, pid) AND 
		pwd in (SELECT G.password FROM public."Guests" as G
					WHERE uname=G.username) THEN
		INSERT INTO public."Booking" (id,check_in_date, check_out_date, property_id, booked_by)
		VALUES (nextval('book_id'),cid, cod, pid, 
				(SELECT id from public."Guests" as G 
				 WHERE uname=G.username));
		IF (packid <> 0) THEN
				 pp = (SELECT  price FROM public."Package"  WHERE id = packid);
				 UPDATE public."Transaction" 
				 SET owing = owing + pp
				 WHERE booking_id = currval('book_id');
		END IF;
				
		
		RETURN true;
	END IF;
	RETURN false;
	
END;
$$ LANGUAGE plpgsql;


9. 
DELETE FROM public."Booking" WHERE id = $1

10.
// IF hotel
SELECT services_expenses FROM public."HOTEL" as H
	WHERE H.prop_id in 
		(SELECT prop_id FROM public."Booking" as B
		WHERE B.id = $1)

11. trigger



12.

SELECT name, description, contact, location 
FROM public."Guests"
WHERE id = $1

13.

SELECT name, description, contact, location 
FROM public."Owner"
WHERE id = $1

14. // FUNCTION TO CHECK AVAILIBILITY

CREATE OR REPLACE FUNCTION checkAvailibility(cid DATE, cod DATE, pid INT)
RETURNS BOOLEAN
AS $$
BEGIN
	RETURN cid < cod AND ((SELECT COUNT(*) FROM public."Booking" as B
	WHERE (B.property_id=pid AND (cid<check_out_date AND cod>check_in_date))) = 0);			  

END;
$$ LANGUAGE plpgsql;


15. GetReview

SELECT * FROM public."Review" as R
INNER JOIN public."ReviewOfProperty" as ROP
ON R.id = ROP.rev_id
WHERE ROP.prop_id =$1

16. not Reviewed owner
SELECT O.id as owner_id, O.name as owner_name
FROM public."Owner" AS O
WHERE O.id not in (Select  R.owner_id
				   FROM public."ReviewOfOwner" as R
				   WHERE R.guest_id=3)
	  AND O.id in (SELECT P.owner_id 
				  FROM public."Property"as P
				  WHERE P.id in (SELECT B.property_id
								FROM public."Booking" as B
								where B.booked_by = 3))


17. Retrieve Review
SELECT R.rating, R.description, R.date, G.name
FROM public."Review" AS R, public."Guests" AS G
WHERE R.id in (SELECT ROP.rev_id 
			  FROM public."ReviewOfProperty" AS ROP
			  WHERE ROP.prop_id = 10 AND G.id=ROP.guest_id) 
			  
			  
			 

18. GET PROPERTY DETAILS

SELECT P.name as propName, L.country, L.city, P.description, P.amenities,
	P.price, P.no_of_guests, P.no_of_beds, O.name as owner_name,
	O.id as owner_id, O.description
	FROM public."Property" AS P
	LEFT OUTER JOIN public."Owner" AS O
	ON P.owner_id = O.id
	LEFT OUTER JOIN public."Location" AS L
	ON P.location_id = L.id
	WHERE P.id = 8
	


CREATE OR REPLACE FUNCTION placeReview(r INT, d VARCHAR, t INT, idFrom INT, idTo INT)
RETURNS INTEGER
AS $$
DECLARE
 revID INTEGER := nextval('rev_id'::regclass);
BEGIN
   INSERT INTO public."Review" (id,rating, description, type) VALUES (revID,r,d,t);
   
	IF t=1 THEN
	INSERT INTO public."ReviewOfGuest" (rev_id, guest_id, owner_id) VALUES (revID, idTo, idFrom);
	RETURN 1;
	ELSEIF t=2 THEN
	INSERT INTO public."ReviewOfProperty" (rev_id, prop_id, guest_id) VALUES (revID, idTo, idFrom);
	RETURN 1;
	ELSE
	INSERT INTO public."ReviewOfOwner" (rev_id, owner_id, guest_id) VALUES (revID, idTo, idFrom);
	RETURN 1;
	END IF;

   RETURN 0;
	
END;
$$ LANGUAGE plpgsql;



TRIGGER:
1.

CREATE OR REPLACE FUNCTION newtransaction(guest_id INTEGER,
										  booking_id INTEGER,
										  prop_id INTEGER,
										 check_in_date DATE, check_out_date DATE )
RETURNS INTEGER
AS $$
DECLARE
 price INTEGER;
 owner_id INTEGER;
 
BEGIN
   owner_id := (SELECT id FROM public."Property" AS P WHERE P.id = prop_id);
   price := (SELECT P.price FROM public."Property" AS P
			WHERE P.id = prop_id) * (check_out_date - check_in_date);
   INSERT INTO public."Transaction" (owing,paid,owner_id,
		guest_id,booking_id) VALUES (price,0,owner_id, guest_id ,booking_id);
	RETURN 1;
	
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION payexpense(pid VARCHAR, bid VARCHAR, t INT, etype INT)
RETURNS INTEGER
AS $$
DECLARE
 revID INTEGER := nextval('rev_id'::regclass);
BEGIN
   IF t=1 THEN
   		UPDATE public."Transaction" 
		SET paid = paid + (SELECT parking_expense
						  FROM public."Apartment" 
						  WHERE prop_id = pid)
		WHERE booking_id = bid;
	ELSEIF t=2 THEN
		UPDATE public."Transaction"
		SET paid = paid + (SELECT activities_expense
						   FROM public."Resort"
						   WHERE prop_id = pid)
		WHERE booking_id = bid;
	ELSE 
		IF etype = 1 THEN
			UPDATE public."Transaction"
			SET paid = paid + (SELECT services_expenses
							  FROM public."Hotel"
							  WHERE prop_id = pid)
			WHERE booking_id = bid;
		ELSE 
			UPDATE public."Transaction"
			SET paid = paid + (SELECT food_expenses 
							  FROM public."Hotel"
							  WHERE prop_id = pid)
			WHERE booking_id = bid;
		END IF;
	END IF;

   RETURN 1;
	
END;
$$ LANGUAGE plpgsql;












